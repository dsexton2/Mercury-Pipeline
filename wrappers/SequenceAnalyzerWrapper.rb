#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__), ".", "..", "lib")

require 'PipelineHelper'
require 'EmailHelper'
require 'BWAParams'
require 'rubygems'
require 'hpricot'

# Wrapper for SequenceAnalyzer
# Author: Nirav Shah niravs@bcm.edu

class SequenceAnalyzerWrapper
  def initialize()
    begin
      getFlowcellBarcode()
      cmd = buildCommand()
      runCommand(cmd)
      findAndUploadResult()
    rescue Exception => e
      handleError(e.message)
    end
  end

  private

  #Method to read config file and obtain flowcell barcode
  def getFlowcellBarcode()
    @fcBarcode = nil

    inputParams = BWAParams.new()
    inputParams.loadFromFile()
    @fcBarcode  = inputParams.getFCBarcode() # Lane barcode FCName-Lane-BarcodeName

    if @fcBarcode == nil || @fcBarcode.empty?()
      raise "Did not obtain flowcell barcode in directory : " + Dir.pwd
    end
  end

  # Helper method to build the Jar command to perform sequence analysis.  
  def buildCommand()
    jarName = File.dirname(File.expand_path(File.dirname(__FILE__))) + 
              "/java/SequenceAnalyzer.jar"

    sequenceFiles = PipelineHelper.findSequenceFiles(Dir.pwd)

    if sequenceFiles == nil || sequenceFiles.size < 1
      raise "Could not find sequence files in directory " + Dir.pwd
    elsif sequenceFiles.size > 2
      raise "More than two sequence files detected in directory " + Dir.pwd
    end

    # Sort this array so that first entry is for read 1 and second entry for
    # read 2
    sequenceFiles.sort! 

    cmd = "java -Xmx8G -jar " + jarName + " R1=" + sequenceFiles[0].strip

    if sequenceFiles.size == 2
      cmd = cmd + " R2=" + sequenceFiles[1].strip
    end

    cmd = cmd + " O=" + @fcBarcode + "_uniqueness.txt X=" + @fcBarcode +
          "_uniqueness.xml TMP_DIR=/space1/tmp"
    return cmd
  end

  # Method to run the command to analyze sequences
  def runCommand(cmd)
    startTime = Time.now
    `#{cmd}`
    returnValue = $?
    endTime   = Time.now

    puts "Return value   : " + returnValue.to_s
    puts "Execution time : " + (endTime - startTime).to_s

    if returnValue != 0
      handleError("SequenceAnalyzer failed for flowcell : " + @fcBarcode)
    end
  end

  # Read the result XML generated by SequenceAnalyzer.jar and upload results to
  # LIMS  
  def findAndUploadResult()
    resultFile = @fcBarcode + "_uniqueness.xml"

    if !File::exist?(resultFile)
      raise "Did not find " + resultFile + ", can't upload results to LIMS"
    end
    xmlDoc = Hpricot::XML(open(resultFile))
    uniquePercent = xmlDoc.at("AnalysisMetrics/Uniqueness")["PercentUnique"] 

    puts "Unique Percentage : " + uniquePercent.to_s
    
    limsScript = File.dirname(File.expand_path(File.dirname(__FILE__))) +
                 "/lims_api/setIlluminaLaneStatus.pl"

    limsUploadCmd = "perl " + limsScript + " " + @fcBarcode + 
                    " UNIQUE_PERCENT_FINISHED UNIQUE_PERCENT " + uniquePercent.to_s
    puts limsUploadCmd

    output = `#{limsUploadCmd}`
    puts "Output from LIMS upload command : " + output.to_s
  end

  # Method to handle error
  def handleError(errorMsg)
    $stderr.puts "Error encountered : " + errorMsg
    $stderr.puts "Current directory : " + Dir.pwd
    emailErrorMessage(errorMsg)
    exit -1
  end

   # Send email describing the error message to interested watchers
  def emailErrorMessage(msg)
    obj          = EmailHelper.new()
    emailFrom    = "sol-pipe@bcm.edu"
    emailTo      = obj.getErrorRecepientEmailList()
    
    if @fcBarcode != nil
      emailSubject = "Error while running sequence analysis for : " + @fcBarcode
    else
      emailSubject = "Error while running sequence analysis"
    end

    emailText    = "The error is : " + msg.to_s + "\r\nWorking Directory : " +
                   Dir.pwd

    obj.sendEmail(emailFrom, emailTo, emailSubject, emailText)
  end
end

obj = SequenceAnalyzerWrapper.new()
